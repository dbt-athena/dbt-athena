name: "Release"

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "The branch to release from"
        type: string
        default: "main"
      version:
        description: "The version to release"
        type: string
        required: true
      deploy-to:
        description: "Deploy to test or prod"
        type: environment
        default: prod
      python-version:
        description: "Python version for building and testing the build"
        type: string
        default: "3.12"

permissions:
  contents: read

jobs:
  unit-tests:
    name: 'Run unit tests'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - name: "Checkout ${{ github.event.repository.name }}@${{ inputs.branch }}"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: "Setup Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Install test dependencies"
        run: make install_deps

      - name: "Run unit tests"
        run: make unit_test

  integration-tests:
    name: "Run integration tests"
    uses: ./.github/workflows/functional-tests-workflow.yml
    secrets: inherit
    permissions:
      id-token: write
      contents: read
    with:
      checkout-ref: ${{ inputs.branch }}
      checkout-repository: ${{ github.repository }}

  build-release:
    name: "Build release"
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    outputs:
      archive-name: ${{ steps.archive.outputs.name }}
    steps:
      - name: "Checkout ${{ github.event.repository.name }}@${{ inputs.branch }}"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          persist-credentials: false

      - name: "Setup Python ${{ inputs.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: "Install build dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: "Build ${{ github.event.repository.name }}"
        run: python -m build

      - name: "Set archive name"
        id: archive
        run: |
          archive_name=${{ github.event.repository.name }}-${{ inputs.version }}-${{ inputs.deploy-to }}
          echo "name=$archive_name" >> $GITHUB_OUTPUT

      - name: "Upload artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.archive.outputs.name }}
          path: dist/
          retention-days: 3

  pypi-release:
    name: "PyPI release"
    if: ${{ !failure() && !cancelled() }}
    runs-on: ubuntu-latest
    needs: build-release
    environment:
      name: ${{ inputs.deploy-to }}
      url: ${{ vars.PYPI_PROJECT_URL }}
    permissions:
      # this permission is required for trusted publishing
      # see https://github.com/marketplace/actions/pypi-publish
      id-token: write
    steps:
      - name: "Publish to PyPI"
        uses: dbt-labs/dbt-adapters/.github/actions/publish-pypi@main
        with:
          repository-url: ${{ vars.PYPI_REPOSITORY_URL }}
          archive-name: ${{ needs.build-release.outputs.archive-name }}
